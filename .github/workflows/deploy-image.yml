name: Create and publish a Docker image

on:
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ❌ Remove extra tagging, only keep latest
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=raw,value=latest

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image (only latest)
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

      - name: Clean up old package versions
        run: |
          echo "Cleaning up old images, keeping only the latest..."

          OWNER="${GITHUB_REPOSITORY_OWNER}"
          REPO="${IMAGE_NAME#*/}"

          # Get all versions, newest first
          VERSIONS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /orgs/$OWNER/packages/container/$REPO/versions \
            --jq '.[].id')

          if [[ -z "$VERSIONS" ]]; then
            echo "❌ No versions found for $OWNER/$REPO"
            exit 0
          fi

          echo "Found versions:"
          echo "$VERSIONS"
          echo

          LATEST_VERSION=$(echo "$VERSIONS" | head -n 1)
          echo "Keeping latest version ID: $LATEST_VERSION"
          echo

          for VERSION_ID in $VERSIONS; do
            if [[ "$VERSION_ID" == "$LATEST_VERSION" ]]; then
              echo "Skipping latest version: $VERSION_ID"
              continue
            fi

            echo "Deleting old version: $VERSION_ID"
            gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              /orgs/$OWNER/packages/container/$REPO/versions/$VERSION_ID
          done

          echo "✅ Cleanup complete! Only the latest remains."
