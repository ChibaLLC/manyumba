name: Create and publish a Docker image

on:
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=raw,value=latest

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image (only latest)
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

      # - name: Clean up old images
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     OWNER: ChibaLLC
      #     REPO: manyumba
      #     PACKAGE: manyumba
      #   run: |
      #     echo "Cleaning up old images, keeping only the latest..."

      #     # Fetch package versions
      #     versions=$(gh api "/users/${OWNER}/packages/container/${PACKAGE}/versions" --jq '.[].id')

      #     echo "Found versions:"
      #     echo "$versions"

      #     # Keep the first (latest) version and delete the rest
      #     count=0
      #     for id in $versions; do
      #       if [ $count -eq 0 ]; then
      #         echo "Keeping latest version: $id"
      #       else
      #         echo "Deleting old version: $id"
      #         gh api \
      #           --method DELETE \
      #           "/users/${OWNER}/packages/container/${PACKAGE}/versions/${id}" || true
      #       fi
      #       count=$((count+1))
      #     done

      #     echo "âœ… Cleanup complete! Only the latest remains."